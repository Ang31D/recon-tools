#!/bin/bash
# crtsh - crt.sh
# // inspired by nahamsec
# // https://github.com/nahamsec/recon_profile/blob/master/.bash_profile

# display short help
if [[ $# == 0  && ! -p /dev/stdin ]]; then
  echo "crt.sh - A utility for quickly searching presorted DNS names."
  echo "Usage: 'crtsh (<domain> | -f <file> -h, --help)'"
  exit
fi

arg_show_help=$(echo 'no')
arg_from_file=$(echo 'no')
from_file=""
argidx=0 # arg index
for arg in $@; do
argidx=$((argidx+1)) # index of arg
validx=$((argidx+1)) # index of arg-value (next arg)
  if [[ '-h' == "${arg}" || '--help' == "${arg}" ]]; then
    arg_show_help=$(echo 'yes')
  elif [[ '-f' == "${arg}" || '--from-file' == "${arg}" ]]; then
    arg_from_file=$(echo 'yes')
    from_file="${!validx}"
  fi
done

#---- validate options ----
if [[ $arg_from_file == 'yes' ]]; then
  if [[ ! -f "$from_file" ]]; then
    echo "dnsgrep: file not found -- '$from_file'"
    arg_show_help=$(echo 'yes')
  fi
fi

# display full help
if [[ $arg_show_help == 'yes' ]]; then
  echo "crt.sh - A utility for quickly searching presorted DNS names."
  echo "Usage: 'crtsh (<domain> | -f <file>)'"
  echo '(no-option)               (default) filter on domain match, split on ","'
  echo '  -h, --help              display this help and exit'
  echo '  -f, --from-file <file>  file with word per line to wild-search for'
  echo '  -d, --dns <dns>         file with dns per line'
  exit
fi

# read list of dns
if [ -p /dev/stdin ]; then
  data=$(cat "/dev/stdin") # from std input (piped output)
elif [[ $arg_from_file == 'yes' ]]; then
  data=$(cat $from_file | grep -v '^#') # from file
else
  data=$(echo $1) # from input
fi

for dns in $data; do
  curl -s https://crt.sh/\?q\=\%.$dns\&output\=json | jq -r '.? | .[].name_value' | sed 's/\*\.//g' | sort -u
done

#!/bin/bash
# rdns - Reverse DNS position
# by AngelD

# TODO
# rdns <file> does not work, empty value of file

# display short help
if [[ $# -eq 0 && ! -p /dev/stdin ]]; then
  echo "Reverse DNS - Reverse of each sub-name (ex. com.google)."
  echo "Usage: 'rdns (<file> | -r <dns>) -h, --help'"
  exit
fi

arg_show_help=$(echo 'no')
from_file=""
arg_rev_dns=$(echo 'no')
rev_dns=""
argidx=0 # arg index
for arg in $@; do
argidx=$((argidx+1)) # index of arg
validx=$((argidx+1)) # index of arg-value (next arg)
  if [[ '-h' == "${arg}" || '--help' == "${arg}" ]]; then
    arg_show_help=$(echo 'yes')
  elif [[ '-r' == "${arg}" || '--rev-dns' == "${arg}" ]]; then
    arg_rev_dns=$(echo 'yes')
    rev_dns="${!validx}"
 fi
done

#---- validate options ----
if [[ $arg_show_help == 'no' ]]; then
  if [[ -p /dev/stdin ]]; then
    if [[ $# -ne 0 ]]; then
      echo "rdns: invalid option(s) -- '$@'"
      arg_show_help=$(echo 'yes')
    fi
  elif [[ $arg_rev_dns == 'yes' ]]; then
    if [[ $# -ne 2 || "$rev_dns" != *.* ]]; then
      echo "rdns: invalid dns -- '$rev_dns'"
      arg_show_help=$(echo 'yes')
    fi
  elif [[ $# -eq 1 ]]; then
    from_file=$1
    if [[ ! -f "$from_file" ]]; then
      echo "rdns: file not found -- '$from_file'"
      arg_show_help=$(echo 'yes')
    fi
  elif [[ $# -gt 2 ]]; then
    echo "rdns: invalid options -- '$@'"
    arg_show_help=$(echo 'yes')
  fi
fi

#---- display help banner ----
if [[ $arg_show_help == 'yes' ]]; then
  echo "Reverse DNS - Reverse of each sub-name (ex. com.google)."
  echo "Usage: 'rdns (<file> | -r <dns>)'"
  echo '  -h, --help              display this help and exit'
  echo '  -r, --rev-input <dns>   reverse dns from input'
  exit
fi

# reverse dns from std input (piped output)
if [ -p /dev/stdin ]; then
  data=$(cat /dev/stdin)
  for dns in $data; do
    if [[ "$dns" == *.* ]]; then
      dns=$(echo $dns | tr "." "\n" | tac | paste -sd.)
    fi
    echo $dns
  done

# reverse dns from argument
elif [[ $arg_rev_dns == 'yes' ]]; then
  dns=$rev_dns
  if [[ "$dns" == *.* ]]; then
    dns=$(echo $dns | tr "." "\n" | tac | paste -sd.)
  fi
  echo $dns

# reverse dns from file
else
  lines=$(cat $from_file | grep -iv '^#')
  for line in $lines; do
    dns=$line
    if [[ "$dns" == *.* ]]; then
      dns=$(echo $dns | tr "." "\n" | tac | paste -sd.)
    fi
    echo $dns
  done
fi
exit


# display short help
if [[ $# -eq 0 ]]; then
  echo "Reverse DNS - Reorder each sub-name (ex. com.google)."
  echo "Usage: 'rdns (<dns> | -f <file>) [options]'"
  exit
fi
# display full help
for arg in $@; do
  if [[ '-h' == "${arg}" || '--help' == "${arg}" ]]; then
  echo "Reverse DNS - Reverse of each sub-name (ex. com.google)."
  echo "Usage: 'rdns (<dns> | -f <file>) [options]'"
#  echo "  -e/--extract-ip       extract IP addresses from string"
#  echo "  -v/--invert-match     exclude IP address from result"
#  echo "  -g/--grep-string      return the whole line containing IP address"
  exit
  fi
done

  if [[ $# -eq 1 ]]; then
    dns=$1
    if [[ "$dns" == *.* ]]; then
      dns=$(echo $dns | tr "." "\n" | tac | paste -sd.)
    fi
    echo $dns
  elif [[ $# -eq 2 ]] && [[ $1 == '-f' || $1 == '--file' ]];then
#    cat $2 | tr "." "\n" | tac | paste -sd. | sort -u
#    cat $2 | while read line; do echo $line | tac | paste -sd.; done
    cat $2 | while read line; do echo $line | tac -s.; done
lines=$(cat $file | grep -iv '^#')
for line in $lines; do
#echo $line | tac | paste -sd.
echo "$line" | tr "." "\n" | tac | paste -sd.
done
  fi
fi

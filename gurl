#!/bin/bash
# gurl - Grep Url
# by AngelD

# display short help
if [[ ! -p /dev/stdin ]] && [[ $# -eq 0 ]]; then
  echo "Grep URL - Parse url"
  echo "Usage: 'gurl [<file>] [options] (-h/--help)'"
  exit
fi

arg_show_help=$(echo 'no')
arg_parse_base_url=$(echo 'no')
arg_parse_uri_path=$(echo 'no')
arg_parse_host_dns=$(echo 'no')
arg_show_stats=$(echo 'no')
argidx=0 # arg index
for arg in $@; do
argidx=$((argidx+1)) # index of arg
validx=$((argidx+1)) # index of arg-value (next arg)
  if [[ '-h' == "${arg}" || '--help' == "${arg}" ]]; then
    arg_show_help=$(echo 'yes')
  elif [[ '-u' == "${arg}" || '--parse-base-url' == "${arg}" ]]; then
    arg_parse_base_url=$(echo 'yes')
  elif [[ '-p' == "${arg}" || '--parse-uri-path' == "${arg}" ]]; then
    arg_parse_uri_path=$(echo 'yes')
  elif [[ '-H' == "${arg}" || '--parse-host-dns' == "${arg}" ]]; then
    arg_parse_host_dns=$(echo 'yes')
  elif [[ '-s' == "${arg}" || '--show-stats' == "${arg}" ]]; then
    arg_show_stats=$(echo 'yes')
 fi
done

#---- validate options ----
if [[ -p /dev/stdin ]]; then
  if [[ "$#" -gt 0 && "$1" != "-"* ]]; then
    echo "gurl: invalid option -- '$1'"
    arg_show_help=$(echo 'yes')
  fi
elif [[ "$#" -gt 0 ]]; then
  if [[ "$1" == "-"* ]]; then
    echo "gurl: invalid option -- '$1'"
    arg_show_help=$(echo 'yes')
  elif [[ ! -f "$1" ]]; then
    echo "gurl: file not found -- '$1'"
    arg_show_help=$(echo 'yes')
  fi
fi

# display full help
if [[ '-h' == "${arg}" || '--help' == "${arg}" ]]; then
  echo "Grep Url - Parse url"
  echo "Usage: 'gurl [<file>] [-u|-p|-H]'"
  echo "  -p/--parse-uri-path   (default) output uri '</path>' (exclude 'http(s)://<host-dns>')"
  echo "  -u/--parse-base-url   output root-url 'http(s)://<host-dns>' (exclude '</path>*')"
  echo "  -H/--parse-host-dns   output unique host dns (exclude 'http(s)://' and '</path>*')"
  echo "  -s/--show-stats       show number of occurrence (-u|-H)"
  exit
fi

data=""
if [[ -p /dev/stdin ]]; then
  data=$(cat "/dev/stdin")
else
  data=$(cat "$1")
fi

if [[ $arg_parse_host_dns == 'yes' ]]; then
  if [[ $arg_show_stats == 'yes' ]]; then
    echo "$data" | grep -Eo "^(http|https)://[a-zA-Z0-9._-]*" | sed 's/.*\/\///g' | sort | uniq -c | sort -nr
  else
    echo "$data" | grep -Eo "^(http|https)://[a-zA-Z0-9._-]*" | sed 's/.*\/\///g' | rev | sort -u -V | rev
  fi
elif [[ $arg_parse_base_url == 'yes' ]]; then
  if [[ $arg_show_stats == 'yes' ]]; then
    echo "$data" | grep -Eo "^(http|https)://[a-zA-Z0-9._-]+" | sort | uniq -c | sort -nr
  else
    echo "$data" | grep -Eo "^(http|https)://[a-zA-Z0-9._-]+" | sort -u -V
  fi
elif [[ $arg_parse_uri_path == 'yes' ]]; then
  echo "$data" | cut -d/ -f4- | sed 's/^/\//g' | sort -u -V
else
#// defaults to parse uri-path
  echo "$data" | cut -d/ -f4- | sed 's/^/\//g' | sort -u -V
fi

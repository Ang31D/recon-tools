#!/bin/bash
# dnsgrep - DNS Grep
# by AngelD

# DNSGrep â€” Quickly Searching Large DNS Datasets
# https://blog.erbbysam.com/index.php/2019/02/09/dnsgrep/

# display help banner
if [[ $# -eq 0 && ! -p /dev/stdin ]]; then
  echo "DNS Grep - A utility for quickly searching presorted DNS names."
  echo "Usage: 'dnsgrep (<dns> | -f <file>) [options] -h, --help'"
  exit
fi

arg_show_help=$(echo 'no')
arg_query_dns=$(echo 'no')
query_dns=""
arg_from_file=$(echo 'no')
from_file=""
arg_pretty_json=$(echo 'no')
arg_raw=$(echo 'no')
arg_filter=$(echo 'yes')
arg_include_ip=$(echo 'no')
arg_only_ip=$(echo 'no')
argidx=0 # arg index
for arg in $@; do
argidx=$((argidx+1)) # index of arg
validx=$((argidx+1)) # index of arg-value (next arg)
  if [[ '-h' == "${arg}" || '--help' == "${arg}" ]]; then
    arg_show_help=$(echo 'yes')
  elif [[ '-q' == "${arg}" || '--query-dns' == "${arg}" ]]; then
    arg_query_dns=$(echo 'yes')
    query_dns="${!validx}"
  elif [[ '-f' == "${arg}" || '--from-file' == "${arg}" ]]; then
    arg_from_file=$(echo 'yes')
    from_file="${!validx}"
  elif [[ '-p' == "${arg}" || '--pretty' == "${arg}" ]]; then
    arg_pretty_json=$(echo 'yes')
  elif [[ '-r' == "${arg}" || '--raw' == "${arg}" ]]; then
    arg_raw=$(echo 'yes')
  elif [[ '-F' == "${arg}" || '--no-filter' == "${arg}" ]]; then
    arg_filter=$(echo 'no')
  elif [[ '-i' == "${arg}" || '--include-ip' == "${arg}" ]]; then
    arg_include_ip=$(echo 'yes')
  elif [[ '-I' == "${arg}" || '--only-ip' == "${arg}" ]]; then
    arg_only_ip=$(echo 'yes')
 fi
done

#---- validate options ----
if [[ $arg_query_dns == 'yes' ]]; then
  if [[ "$query_dns" != *.* ]]; then
    echo "dnsgrep: invalid dns -- '$query_dns'"
    arg_show_help=$(echo 'yes')
  fi
fi
if [[ $arg_from_file == 'yes' ]]; then
  if [[ ! -f "$from_file" ]]; then
    echo "dnsgrep: file not found -- '$from_file'"
    arg_show_help=$(echo 'yes')
  fi
fi
if [[ ! -p /dev/stdin ]] && [[ $arg_from_file == "no" && "$1" == "-"* ]]; then
  echo "dnsgrep: invalid option -- '$1'"
  arg_show_help=$(echo 'yes')
fi

# display full help
if [[ $arg_show_help == 'yes' ]]; then
  echo "DNS Grep - A utility for quickly searching presorted DNS names."
  echo "Usage: 'dnsgrep (<dns> | -f <file>) [-p|-r] [-F, -i|-I] [options]'"
  echo '(no-option)               (default) list (split on ","), filter on domain'
  echo '  -h, --help              display this help and exit'
  echo '  -q, --query-dns <dns>   dns to query'
  echo '  -f, --from-file <file>  file with dns per line'
  echo '  -p, --pretty-json       output as pretty-json'
  echo '  -r, --raw               do not output as list (no split on ",")'
  echo '  -F, --no-filter         output does not filter on domain match'
  echo '  -i, --include-ip        include ip address in output, supported with -L (default: no)'
  echo '  -I, --only-ip           only output ip addresses, supported with -L (default: no)'
  exit
fi

# read list of dns
if [ -p /dev/stdin ]; then
  data=$(cat "/dev/stdin") # from std input (piped output)
elif [[ $# -gt 0 ]]; then
  if [[ $arg_from_file == 'yes' ]]; then
    data=$(cat $from_file) # from file
  elif [[ $arg_query_dns == 'yes' ]]; then
    data=$(echo $query_dns) # from input
  else
    data=$(echo $1) # from input
  fi
fi

for dns in $data; do
dns_is_ip=$(echo "$dns" | grep -E "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$")
if [[ "${#dns_is_ip}" -gt 0 ]]; then # is IP Address, only dns is allowed
  continue
fi
result=$(curl -s https://dns.bufferover.run/dns?q=$dns)


if [[ $arg_pretty_json == 'yes' ]]; then
  echo "$result" | jq -r
  exit
fi

result=$(echo "$result" | jq -r '.? | .FDNS_A[],.RDNS[]')
if [[ $arg_raw == 'yes' ]]; then
  echo "$result"
  exit
fi
result=$(echo "$result" | tr ',' '\n' | sort -u -V)

output=$(echo "$result")
if [[ $arg_filter == 'yes' ]]; then
  output=$(echo "$output" | grep -E "^${dns}$|\.${dns}$")
else
  if [[ $arg_include_ip == 'no' ]]; then
    output=$(echo "$output" | grep -Ev "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$" | sort -u -V)
  fi
  if [[ $arg_only_ip == 'yes' ]]; then
    output=$(echo "$result" | grep -E "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$" | sort -u -V)
  fi
fi

if [[ "${#output}" -gt 0 ]]; then
  echo "$output"
fi
done

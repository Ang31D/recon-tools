#!/bin/bash
# get url and index
# by AngelD

# UrlIndex â€” Curl url and store hash in index

# display help banner
if [[ $# -eq 0 && ! -p /dev/stdin ]]; then
  echo "Index Url - Curl url and store hash in index."
  echo "Usage: 'urlindex (<url>) [options] -h, --help'"
  exit
fi

arg_show_help=$(echo 'no')
arg_curl_silent=$(echo 'no')
arg_curl_verbose=$(echo 'no')
arg_curl_insecure=$(echo 'no')
#arg_out_folder=$(echo 'no')
arg_out_folder=$(echo 'yes')
out_folder=$(echo 'index_data/')
arg_dry_run=$(echo 'no')
arg_filter_indexed=$(echo 'no')
arg_filter_no_index=$(echo 'no')
index_folder=$(echo '')
arg_hash=$(echo 'no')
arg_lookup_index=$(echo 'no')
arg_cleanup_index=$(echo 'no')
argidx=0 # arg index
for arg in $@; do
  argidx=$((argidx+1)) # index of arg
  validx=$((argidx+1)) # index of arg-value (next arg)

  if [[ '-h' == "${arg}" || '--help' == "${arg}" ]]; then
    arg_show_help=$(echo 'yes')
  elif [[ '-k' == "${arg}" || '--insecure' == "${arg}" || '--skip-ssl' == "${arg}" ]]; then
    arg_curl_insecure=$(echo 'yes')
  elif [[ '-L' == "${arg}" || '--locationt' == "${arg}" || '--follow' == "${arg}" ]]; then
    arg_curl_insecure=$(echo 'yes')
  elif [[ '-v' == "${arg}" || '--verbose' == "${arg}" ]]; then
    arg_curl_verbose=$(echo 'yes')
  elif [[ '-s' == "${arg}" || '--silent' == "${arg}" ]]; then
    arg_curl_silent=$(echo 'yes')
  elif [[ '-o' == "${arg}" || '--output' == "${arg}" ]]; then
    arg_out_folder=$(echo 'yes')
    next_arg="${!validx}"
    if [[ "${next_arg}" != "-"* && "${#next_arg}" -gt 0 ]]; then
      out_folder="${!validx}"
    fi
  elif [[ '-I' == "${arg}" || '--filter-indexed' == "${arg}" ]]; then
    arg_filter_indexed=$(echo 'yes')
    next_arg="${!validx}"
    if [[ "${next_arg}" != "-"* && "${#next_arg}" -gt 0 ]]; then
      index_folder="${!validx}"
    fi
  elif [[ '-N' == "${arg}" || '--filter-no-index' == "${arg}" ]]; then
    arg_filter_no_index=$(echo 'yes')
    next_arg="${!validx}"
    if [[ "${next_arg}" != "-"* && "${#next_arg}" -gt 0 ]]; then
      index_folder="${!validx}"
    fi
  elif [[ '-H' == "${arg}" || '--hash' == "${arg}" ]]; then
    arg_hash=$(echo 'yes')
  elif [[ '-l' == "${arg}" || '--lookup-index' == "${arg}" ]]; then
    arg_lookup_index=$(echo 'yes')
  elif [[ '--dry-run' == "${arg}" ]]; then
    arg_dry_run=$(echo 'yes')
  elif [[ '--cleanup' == "${arg}" ]]; then
    arg_cleanup_index=$(echo 'yes')
  fi
done

#---- clean-up folder path(s) ----
if [[ $arg_out_folder == 'yes' ]]; then
  if [[ "${out_folder}" == *"/" ]]; then
    out_folder=$(echo "${out_folder}" | sed 's/\/$//g')
  fi
fi
if [[ $arg_filter_indexed == 'yes' || $arg_filter_no_index == 'yes' ]]; then
  if [[ "${index_folder}" == *"/" ]]; then
    index_folder=$(echo "${index_folder}" | sed 's/\/$//g')
  fi
  if [[ "${index_folder}" == "-"* ]]; then
    index_folder=$(echo '')
  fi
fi

#---- validate options ----
if [[ $arg_show_help == 'no' ]]; then
if [[ $arg_cleanup_index == 'no' ]] && [[ ! -p "/dev/stdin" && ! "$1" == "http"* ]]; then
  echo "urlindex: invalid url -- '$1'"
  arg_show_help=$(echo 'yes')
fi
if [[ $arg_out_folder == 'yes' ]]; then
  if [[ "${#out_folder}" -eq 0 || "$out_folder" == "-"* ]]; then
    echo "urlindex: invalid folder -- '$out_folder'"
    arg_show_help=$(echo 'yes')
  fi
fi
if [[ $arg_filter_indexed == 'yes' || $arg_filter_no_index == 'yes' ]]; then
  if [[ "${#index_folder}" -eq 0 && "${#out_folder}" -gt 0 ]]; then
    index_folder=$(echo "${out_folder}")
  fi
  if [[ ! -d "${index_folder}" ]]; then
    echo "urlindex: invalid folder -- '$index_folder'"
    arg_show_help=$(echo 'yes')
  fi
fi
fi


# display full help
if [[ $arg_show_help == 'yes' ]]; then
  echo "Url Index - A utility for quickly searching presorted DNS names."
  echo "Usage: 'urlindex (<url>) [-v, -k, -s] [-o|-D, -I] [options]'"
  echo '  -h, --help                      display this help and exit'
# // curl options
  echo '  -v, --verbose                   Make the operation more talkative (curl)'
  echo "  -s, --silent                    Silent mode (don't output anything, curl)"
  echo '  -k, --insecure, --skip-ssl      Allow connections to SSL sites without certs (curl)'
  echo '  -L, --location, --follow        Follow redirects (curl)'
# // script options
  echo '  -o, --output <folder>           Write index to output folder (default: ./index_data)'
  echo '  -I, --filter-indexed <folder>   Filter by indexed urls (md5 file)'
  echo '  -N, --filter-no-index <folder>  Filter urls not in index (md5 file)'
  echo "  -H, --hash                      Hash input"
  echo '  -l, --lookup (<index>)          Show url for index (md5 hash, index file)'
  echo '  --cleanup                       Cleanup orphan indexes (md5 hash, index file)'
  echo '  -D, --dry-run                   Dry, do not store in files.'
  exit
fi

if [ -p /dev/stdin ]; then
  urls=$(cat "/dev/stdin") # from std input (piped output)
else
  urls=$(echo $1) # from input
fi

# // create folder path if not exists
if [[ $arg_out_folder == 'yes' &&  ! -d "${out_folder}" ]]; then
  mkdir -p "${out_folder}"
  if [[ ! -d "${out_folder}" ]]; then
    echo "urlindex: failed to create folder -- '$out_folder'"
    exit
  fi
fi

if [[ $arg_cleanup_index == 'yes' ]]; then
  #echo "remove orphan index files"
  index_list=$(ls "${out_folder}/" | grep -Ev "^index$")
  for index in $index_list; do
    index_data=$(grep -n -E "^${index}:" "${out_folder}/index")
    if [[ "${#index_data}" -eq 0 ]]; then
      if [[ $arg_dry_run == 'no' ]]; then
        rm "${out_folder}/${index}"
      else
        echo "${out_folder}/${index}"
      fi
    fi
  done
  exit
fi

for url in $urls; do
  index=$(echo "'$url'" | md5sum | sed 's/ .*//g')
  # // for both filter on indexed and no-index:
  # // only output filtered urls so we can
  # // pipe the result to urlindex again.
  if [[ $arg_filter_no_index == 'yes' ]]; then
    if [[ ! -f "${out_folder}/${index}" ]];then
      if [[ $arg_hash == 'yes' ]]; then
        echo "${index}:${url}"
      else
        echo "${url}"
      fi
    fi
    continue
  fi
  if [[ $arg_filter_indexed == 'yes' ]]; then
    if [[ -f "${out_folder}/${index}" ]];then
      if [[ $arg_hash == 'yes' ]]; then
        echo "${index}:${url}"
      else
        echo "${url}"
      fi
    fi
    continue
  fi

  # // build curl command
  curl_cmd=$(echo "curl")
  if [[ $arg_curl_silent == 'yes' ]]; then
    curl_cmd=$(echo "${curl_cmd} -s")
  fi
  if [[ $arg_curl_verbose == 'yes' ]]; then
    curl_cmd=$(echo "${curl_cmd} -v")
  fi
  if [[ $arg_curl_insecure == 'yes' ]]; then
#      curl_cmd=$(echo "${curl_cmd}" | tee "${out_folder}/${index}")
    curl_cmd=$(echo "${curl_cmd} -k")
  fi
# // execute curl -- write index
  # // curl if not already indexed
  if [[ ! -f "${out_folder}/${index}" ]]; then
    if [[ $arg_out_folder == 'yes' ]]; then
      if [[ $arg_dry_run == 'no' ]]; then
        echo "${url}" >> "${out_folder}/${index}"
      else
        #echo "${index} <- ${url}"
        echo "${out_folder}/${index} <- ${url}"
      fi
    fi
  elif [[ $arg_dry_run == 'yes' ]]; then
    #echo "index -> ${index}:${url}"
    echo "${out_folder}/${index} -> ${index}:${url}"
#        echo "${curl_cmd} ${url} | tee ${out_folder}/${index}"
#        "${curl_cmd} ${url}" | tee "${out_folder}/${index}"
#        "${curl_cmd[@]}"
  fi

  # // write to index
  # // check for existing index
  index_data=$(echo '')
  index_row=$(echo 0)
  index_hash=$(echo '')
  index_url=$(echo '')
  if [[ -f "${out_folder}/index" ]]; then
    index_data=$(grep -n -E "^${index}:" "${out_folder}/index")
    if [[ "${#index_data}" -gt 0 ]]; then
      #echo $index_data
      index_row=$(echo $index_data | cut -d: -f 1)
      index_hash=$(echo $index_data | cut -d: -f 2)
      index_url=$(echo $index_data | cut -d: -f 3-)
      #echo "index(row: ${index_row}).data: ${index_hash}:${index_url}"
    fi
  fi
  # // index does't exists
  if [[ "${#index_data}" -eq 0 ]]; then
    if [[ $arg_out_folder == 'yes' ]]; then
      if [[ $arg_dry_run == 'no' ]]; then
        echo "${index}:${url}" >> "${out_folder}/index"
      else
        #echo "${index}:${url} -> index"
        echo "${out_folder}/index <- ${index}:${url}"
      fi
    elif [[ $arg_dry_run == 'yes' ]]; then
      #echo "${index}:${url} -> index"
      echo "${out_folder}/index -> ${index}:${url}"
    fi
  elif [[ $arg_dry_run == 'yes' ]]; then
    #echo "index -> ${index}:${url}"
    echo "${out_folder}/index -> ${index}:${url}"
    #echo "${out_folder}/index:${index_row} -> ${index}:${url}"
  fi
done
